#include <iostream>
#include <algorithm>
#include <thread>
#include <mutex>


using namespace std;


/*
经典进程同步互斥问题总结
 1. 基本概念

    临界资源: 某些资源在同一时间只能被一个进程所占用。

    互斥: 互斥是进程之间的间接制约关系。当一个进程进入临界区使用临界资源的时候，另一个进程必须等待。只有当使用临界资源的进程
    退出后，这个进程才会接触阻塞状态。

    同步: 同步是进程之间的直接制约关系。为了完成任务的两个或者多个线程，这个线程需要在某些位置上协调他们的工作次序而等待,
    传递信息所产生的制约关系。进程之间的额直接制约关系来自于他们之间的合作。
    
         
    实现临界区互斥的基本方式:
        a. 关中断
        b. 利用Test_and_Set指令实现互斥
        c. 利用Swap指令实现互斥
 
    信号量实现方式:  PV操作，通过设置一个资源个数的信号量S, 通过对信号量S的P和V操作来实现进程的互斥。
P和V分别代表占有和释放，属于操作系统原语，意味着具有原子性。
    P操作首先减少信号量，表示有一个进程将占用或等待资源，然后检测S是否小于0，如果小于0则阻塞，如果大于0
则占有资源继续执行。
    V操作是和P操作相反的操作，首先增加信号量，表示占用或者等待资源的进程少了1个。然后检测S是否小于0，如果小于0
则唤醒等待使用S资源的其他进程。    
    

 2. 经典问题总结
        
    生产者和消费者问题

*/













































